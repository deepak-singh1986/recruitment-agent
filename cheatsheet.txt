Quickstart Cheat Sheet for AI Recruitment Agent
1. Clone / unzip repo
unzip ai_recruitment_full_repo.zip -d ai_recruitment_full_repo
cd ai_recruitment_full_repo

2. Create virtual environment
python -m venv .venv
source .venv/bin/activate       # Windows: .venv\Scripts\activate

3. Install dependencies
pip install -r requirements.txt
python -m spacy download en_core_web_sm

4. Setup environment

Copy sample env:

cp .env.sample .env


Edit .env with your configs:

PUBLIC_SERVER_URL=https://xxxx.ngrok-free.app
TWILIO_ACCOUNT_SID=ACxxxx
TWILIO_AUTH_TOKEN=xxxx
TWILIO_PHONE=+1xxxx
OLLAMA_URL=http://localhost:11434
VOSK_MODEL_PATH=models/vosk-model-small-en-in-0.4
DATABASE_URL=postgresql+psycopg2://user:pass@localhost:5432/ai_recruitment


⚠️ Ensure:

PostgreSQL is running and ai_recruitment DB is created

Ollama is serving LLaMA 3.1 8B:

ollama run llama3.1:8b


Vosk model is placed in models/

5. Start backend server
uvicorn app:app --host 0.0.0.0 --port 8000

6. Access dashboard (UI)

Open in browser:

http://localhost:8000/dashboard


On the dashboard:

Upload JD (PDF) → stored in jd/

Upload Resumes (PDFs) → stored in candidates/

Click Run Shortlisting → matches candidates to JD

Click Start Calls → agent interviews shortlisted candidates

Watch real-time status table

After call → click View Report (JSON/PDF/HTML from results/)

7. Expose server for Twilio

Run:

ngrok http 8000


Update .env → PUBLIC_SERVER_URL with ngrok HTTPS URL.
Set Twilio Voice webhook (Console → Phone Number → Voice & Fax → Webhook):

https://<PUBLIC_SERVER_URL>/voice

8. (Optional) Local simulation without Twilio

Convert your voice sample:

ffmpeg -i myvoice.wav -ar 8000 -ac 1 -acodec pcm_s16le sample.wav


Run harness:

python simulate_twilio.py


This simulates a Twilio call locally → logs transcriptions & agent replies.

✅ At this point:

Dashboard running

JD + resumes uploaded

Candidates shortlisted

Calls happening (Twilio or simulated)

Reports saved in results/interview_reports/